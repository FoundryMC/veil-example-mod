layout (quads, fractional_odd_spacing, cw) in;

uniform mat4 ModelViewMat;
uniform mat4 RenderProjMat;

uniform sampler2D Sampler0;
uniform vec3 Scale;

in vec2 TextureCoord[];
in vec3 Normal[];

out vec2 texCoord;
out vec3 normal;

vec3 calculateNormal(float height, vec2 texCoord) {
    const vec2 size = vec2(1.0, 0.0);
    const ivec3 off = ivec3(-1, 0, 1);

    float s11 = height;
    float s01 = textureOffset(Sampler0, texCoord, off.xy).r * Scale.y;
    float s21 = textureOffset(Sampler0, texCoord, off.zy).r * Scale.y;
    float s10 = textureOffset(Sampler0, texCoord, off.yx).r * Scale.y;
    float s12 = textureOffset(Sampler0, texCoord, off.yz).r * Scale.y;
    vec3 va = vec3(size.xy, s21-s01);
    vec3 vb = vec3(size.yx, s12-s10);
    return normalize(cross(va, vb));
}

void main()
{
    // get patch coordinate
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    // ----------------------------------------------------------------------
    // retrieve control point texture coordinates
    vec2 t00 = TextureCoord[0];
    vec2 t01 = TextureCoord[1];
    vec2 t10 = TextureCoord[2];
    vec2 t11 = TextureCoord[3];

    // bilinearly interpolate texture coordinate across patch
    vec2 t0 = (t01 - t00) * u + t00;
    vec2 t1 = (t11 - t10) * u + t10;
    vec2 coord = (t1 - t0) * v + t0;

    // lookup texel at patch coordinate for height and scale + shift as desired
    float height = Scale.y * texture(Sampler0, coord).y;
    texCoord = coord;

    // ----------------------------------------------------------------------
    // retrieve control point position coordinates
    vec4 p00 = gl_in[0].gl_Position;
    vec4 p01 = gl_in[1].gl_Position;
    vec4 p10 = gl_in[2].gl_Position;
    vec4 p11 = gl_in[3].gl_Position;

    // compute patch surface normal
    normal = calculateNormal(height, coord);

    // bilinearly interpolate position coordinate across patch
    vec4 p0 = (p01 - p00) * u + p00;
    vec4 p1 = (p11 - p10) * u + p10;
    vec4 p = (p1 - p0) * v + p0;

    // displace point along normal
    p.y = height;

    // ----------------------------------------------------------------------
    // output patch point position in clip space
    gl_Position = RenderProjMat * ModelViewMat * p;
}